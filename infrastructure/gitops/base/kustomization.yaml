# yaml-language-server: $schema=https://json.schemastore.org/kustomization
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

resources:
- namespace.yaml
- gateway/gateway.yaml
- gateway/httproute.yaml
- keycloak-argocd-secret-sync.yaml
- keycloak/client.yaml
- keycloak/protocolmapper.yaml
- keycloak/roles.yaml
- keycloak/storeconfig.yaml
- vcluster-argocd-secret-sync.yaml

helmCharts:
- name: argo-cd
  repo: https://argoproj.github.io/argo-helm
  releaseName: argocd
  namespace: argocd
  version: 7.7.16
  apiVersions:
  - monitoring.coreos.com/v1
  valuesInline:
    configs:
      params:
        server.insecure: true
        controller.diff.server.side: true
        applicationsetcontroller.enable.progressive.syncs: true
      cm:
        resource.customizations: |
          argoproj.io/Application:
            health.lua: |
              hs = {}
              hs.status = "Progressing"
              hs.message = ""
              if obj.status ~= nil then
                if obj.status.health ~= nil then
                  hs.status = obj.status.health.status
                  if obj.status.health.message ~= nil then
                    hs.message = obj.status.health.message
                  end
                end
              end
              return hs
          "*.keycloak.crossplane.io/*":
            health.lua: |
              local hs = {}
              if obj.status ~= nil then
                if obj.status.conditions ~= nil then
                  local ready = false
                  local synced = false
                  local suspended = false
                  for i, condition in ipairs(obj.status.conditions) do
                    if condition.type == "Ready" then
                      ready = condition.status == "True"
                      ready_message = condition.reason
                    elseif condition.type == "Synced" then
                      synced = condition.status == "True"
                      if condition.reason == "ReconcileError" then
                        synced_message = condition.message
                      elseif condition.reason == "ReconcilePaused" then
                        suspended = true
                        suspended_message = condition.reason
                      end
                    end
                  end
                  if ready and synced then
                    hs.status = "Healthy"
                    hs.message = ready_message
                  elseif synced == false and suspended == true then
                    hs.status = "Suspended"
                    hs.message = suspended_message
                  elseif ready == false and synced == true and suspended == false then
                    hs.status = "Progressing"
                    hs.message = "Waiting for resource to be available"
                  else
                    hs.status = "Degraded"
                    hs.message = synced_message
                  end
                  return hs
                end
              end

              hs.status = "Progressing"
              hs.message = "Waiting for resource to be created"
              return hs
          "k8s.keycloak.org/Keycloak":
            health.lua: |
              local hs = {}
              if obj.status ~= nil then
                if obj.status.conditions ~= nil then
                  local ready = false
                  local haserrors = false
                  local rollingupdate = false
                  for i, condition in ipairs(obj.status.conditions) do
                    if condition.type == "Ready" then
                      ready = condition.status == "True"
                      ready_message = condition.message
                    elseif condition.type == "HasErrors" then
                      haserrors = condition.status == "True"
                      haserrors_message = condition.message
                    elseif condition.type == "RollingUpdate" then
                      rollingupdate = condition.status == "True"
                      rollingupdate_message = condition.message
                    end
                  end
                  if ready and haserrors == false and rollingupdate == false then
                    hs.status = "Healthy"
                    hs.message = ready_message
                  elseif rollingupdate == true then
                    hs.status = "Progressing"
                    hs.message = rollingupdate_message
                  elseif ready == false and haserrors == false then
                    hs.status = "Progressing"
                    hs.message = "Waiting for resource to be available"
                  else
                    hs.status = "Degraded"
                    hs.message = haserrors_message
                  end
                  return hs
                end
              end

              hs.status = "Progressing"
              hs.message = "Waiting for resource to be created"
              return hs
          "postgresql.cnpg.io/Cluster":
            health.lua: |
              local hs = {}
              if obj.status ~= nil then
                if obj.status.conditions ~= nil then
                  local ready = false
                  local continuousarchiving = false
                  for i, condition in ipairs(obj.status.conditions) do
                    if condition.type == "Ready" then
                      ready = condition.status == "True"
                      ready_message = condition.message
                    elseif condition.type == "ContinuousArchiving" then
                      continuousarchiving = condition.status == "True"
                      continuousarchiving_message = condition.message
                    end
                  end
                  if ready and continuousarchiving then
                    hs.status = "Healthy"
                    hs.message = ready_message
                  else
                    hs.status = "Progressing"
                    hs.message = ready_message
                  end
                  return hs
                end
              end

              hs.status = "Progressing"
              hs.message = "Waiting for resource to be created"
              return hs
        resource.exclusions: |
          - apiGroups:
              - cilium.io
            kinds:
              - CiliumIdentity
            clusters:
              - "*"
        dex.config: |
          connectors:
          - type: oidc
            id: keycloak
            name: seigra.net
            config:
              issuer: https://auth.seigra.net/realms/home
              clientID: argocd
              clientSecret: $argocd-oidc-secret:client_secret
              scopes:
              - openid
              - profile
              - email
              getUserInfo: true
              userNameKey: preferred_username
              insecureEnableGroups: true
        kustomize.buildOptions: --enable-helm
        url: https://argocd.seigra.net
        timeout.reconciliation.jitter: 1m
