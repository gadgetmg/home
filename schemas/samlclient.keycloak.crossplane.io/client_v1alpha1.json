{
  "description": "Client is the Schema for the Clients API.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ClientSpec defines the desired state of Client",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "assertionConsumerPostUrl": {
              "description": "SAML POST Binding URL for the client's assertion consumer service (login responses).",
              "type": "string"
            },
            "assertionConsumerRedirectUrl": {
              "description": "SAML Redirect Binding URL for the client's assertion consumer service (login responses).",
              "type": "string"
            },
            "authenticationFlowBindingOverrides": {
              "description": "Override realm authentication flow bindings",
              "items": {
                "properties": {
                  "browserId": {
                    "description": "Browser flow id, (flow needs to exist)",
                    "type": "string"
                  },
                  "directGrantId": {
                    "description": "Direct grant flow id (flow needs to exist)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "baseUrl": {
              "description": "When specified, this URL will be used whenever Keycloak needs to link to this client.",
              "type": "string"
            },
            "canonicalizationMethod": {
              "description": "The Canonicalization Method for XML signatures. Should be one of \"EXCLUSIVE\", \"EXCLUSIVE_WITH_COMMENTS\", \"INCLUSIVE\", or \"INCLUSIVE_WITH_COMMENTS\". Defaults to \"EXCLUSIVE\".",
              "type": "string"
            },
            "clientId": {
              "description": "The unique ID of this client, referenced in the URI during authentication and in issued tokens.",
              "type": "string"
            },
            "clientIdRef": {
              "description": "Reference to a Client in openidclient to populate clientId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "clientIdSelector": {
              "description": "Selector for a Client in openidclient to populate clientId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "clientSignatureRequired": {
              "description": "When true, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via signing_certificate and signing_private_key. Defaults to true.",
              "type": "boolean"
            },
            "description": {
              "description": "The description of this client in the GUI.",
              "type": "string"
            },
            "enabled": {
              "description": "When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.",
              "type": "boolean"
            },
            "encryptAssertions": {
              "description": "When true, the SAML assertions will be encrypted by Keycloak using the client's public key. Defaults to false.",
              "type": "boolean"
            },
            "encryptionCertificate": {
              "description": "If assertions for the client are encrypted, this certificate will be used for encryption.",
              "type": "string"
            },
            "extraConfig": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of key/value pairs to add extra configuration attributes to this client. Use this attribute at your own risk, as s may conflict with top-level configuration attributes in future provider updates.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "forceNameIdFormat": {
              "description": "Ignore requested NameID subject format and use the one defined in name_id_format instead. Defaults to false.",
              "type": "boolean"
            },
            "forcePostBinding": {
              "description": "When true, Keycloak will always respond to an authentication request via the SAML POST Binding. Defaults to true.",
              "type": "boolean"
            },
            "frontChannelLogout": {
              "description": "When true, this client will require a browser redirect in order to perform a logout. Defaults to true.",
              "type": "boolean"
            },
            "fullScopeAllowed": {
              "description": "- Allow to include all roles mappings in the access token",
              "type": "boolean"
            },
            "idpInitiatedSsoRelayState": {
              "description": "Relay state you want to send with SAML request when you want to do IDP Initiated SSO.",
              "type": "string"
            },
            "idpInitiatedSsoUrlName": {
              "description": "URL fragment name to reference client when you want to do IDP Initiated SSO.",
              "type": "string"
            },
            "includeAuthnStatement": {
              "description": "When true, an AuthnStatement will be included in the SAML response. Defaults to true.",
              "type": "boolean"
            },
            "loginTheme": {
              "description": "The login theme of this client.",
              "type": "string"
            },
            "logoutServicePostBindingUrl": {
              "description": "SAML POST Binding URL for the client's single logout service.",
              "type": "string"
            },
            "logoutServiceRedirectBindingUrl": {
              "description": "SAML Redirect Binding URL for the client's single logout service.",
              "type": "string"
            },
            "masterSamlProcessingUrl": {
              "description": "When specified, this URL will be used for all SAML requests.",
              "type": "string"
            },
            "name": {
              "description": "The display name of this client in the GUI.",
              "type": "string"
            },
            "nameIdFormat": {
              "description": "Sets the Name ID format for the subject.",
              "type": "string"
            },
            "realmId": {
              "description": "The realm this client is attached to.",
              "type": "string"
            },
            "realmIdRef": {
              "description": "Reference to a Realm in realm to populate realmId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "realmIdSelector": {
              "description": "Selector for a Realm in realm to populate realmId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "rootUrl": {
              "description": "When specified, this value is prepended to all relative URLs.",
              "type": "string"
            },
            "signAssertions": {
              "description": "When true, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response. Defaults to false.",
              "type": "boolean"
            },
            "signDocuments": {
              "description": "When true, the SAML document will be signed by Keycloak using the realm's private key. Defaults to true.",
              "type": "boolean"
            },
            "signatureAlgorithm": {
              "description": "The signature algorithm used to sign documents. Should be one of \"RSA_SHA1\", \"RSA_SHA256\", \"RSA_SHA256_MGF1, \"RSA_SHA512\", \"RSA_SHA512_MGF1\" or \"DSA_SHA1\".",
              "type": "string"
            },
            "signatureKeyName": {
              "description": "The value of the KeyName element within the signed SAML document. Should be one of \"NONE\", \"KEY_ID\", or \"CERT_SUBJECT\". Defaults to \"KEY_ID\".",
              "type": "string"
            },
            "signingCertificate": {
              "description": "If documents or assertions from the client are signed, this certificate will be used to verify the signature.",
              "type": "string"
            },
            "signingPrivateKey": {
              "description": "If documents or assertions from the client are signed, this private key will be used to verify the signature.",
              "type": "string"
            },
            "validRedirectUris": {
              "description": "When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            }
          },
          "type": "object"
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "assertionConsumerPostUrl": {
              "description": "SAML POST Binding URL for the client's assertion consumer service (login responses).",
              "type": "string"
            },
            "assertionConsumerRedirectUrl": {
              "description": "SAML Redirect Binding URL for the client's assertion consumer service (login responses).",
              "type": "string"
            },
            "authenticationFlowBindingOverrides": {
              "description": "Override realm authentication flow bindings",
              "items": {
                "properties": {
                  "browserId": {
                    "description": "Browser flow id, (flow needs to exist)",
                    "type": "string"
                  },
                  "directGrantId": {
                    "description": "Direct grant flow id (flow needs to exist)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "baseUrl": {
              "description": "When specified, this URL will be used whenever Keycloak needs to link to this client.",
              "type": "string"
            },
            "canonicalizationMethod": {
              "description": "The Canonicalization Method for XML signatures. Should be one of \"EXCLUSIVE\", \"EXCLUSIVE_WITH_COMMENTS\", \"INCLUSIVE\", or \"INCLUSIVE_WITH_COMMENTS\". Defaults to \"EXCLUSIVE\".",
              "type": "string"
            },
            "clientId": {
              "description": "The unique ID of this client, referenced in the URI during authentication and in issued tokens.",
              "type": "string"
            },
            "clientIdRef": {
              "description": "Reference to a Client in openidclient to populate clientId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "clientIdSelector": {
              "description": "Selector for a Client in openidclient to populate clientId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "clientSignatureRequired": {
              "description": "When true, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via signing_certificate and signing_private_key. Defaults to true.",
              "type": "boolean"
            },
            "description": {
              "description": "The description of this client in the GUI.",
              "type": "string"
            },
            "enabled": {
              "description": "When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.",
              "type": "boolean"
            },
            "encryptAssertions": {
              "description": "When true, the SAML assertions will be encrypted by Keycloak using the client's public key. Defaults to false.",
              "type": "boolean"
            },
            "encryptionCertificate": {
              "description": "If assertions for the client are encrypted, this certificate will be used for encryption.",
              "type": "string"
            },
            "extraConfig": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of key/value pairs to add extra configuration attributes to this client. Use this attribute at your own risk, as s may conflict with top-level configuration attributes in future provider updates.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "forceNameIdFormat": {
              "description": "Ignore requested NameID subject format and use the one defined in name_id_format instead. Defaults to false.",
              "type": "boolean"
            },
            "forcePostBinding": {
              "description": "When true, Keycloak will always respond to an authentication request via the SAML POST Binding. Defaults to true.",
              "type": "boolean"
            },
            "frontChannelLogout": {
              "description": "When true, this client will require a browser redirect in order to perform a logout. Defaults to true.",
              "type": "boolean"
            },
            "fullScopeAllowed": {
              "description": "- Allow to include all roles mappings in the access token",
              "type": "boolean"
            },
            "idpInitiatedSsoRelayState": {
              "description": "Relay state you want to send with SAML request when you want to do IDP Initiated SSO.",
              "type": "string"
            },
            "idpInitiatedSsoUrlName": {
              "description": "URL fragment name to reference client when you want to do IDP Initiated SSO.",
              "type": "string"
            },
            "includeAuthnStatement": {
              "description": "When true, an AuthnStatement will be included in the SAML response. Defaults to true.",
              "type": "boolean"
            },
            "loginTheme": {
              "description": "The login theme of this client.",
              "type": "string"
            },
            "logoutServicePostBindingUrl": {
              "description": "SAML POST Binding URL for the client's single logout service.",
              "type": "string"
            },
            "logoutServiceRedirectBindingUrl": {
              "description": "SAML Redirect Binding URL for the client's single logout service.",
              "type": "string"
            },
            "masterSamlProcessingUrl": {
              "description": "When specified, this URL will be used for all SAML requests.",
              "type": "string"
            },
            "name": {
              "description": "The display name of this client in the GUI.",
              "type": "string"
            },
            "nameIdFormat": {
              "description": "Sets the Name ID format for the subject.",
              "type": "string"
            },
            "realmId": {
              "description": "The realm this client is attached to.",
              "type": "string"
            },
            "realmIdRef": {
              "description": "Reference to a Realm in realm to populate realmId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "realmIdSelector": {
              "description": "Selector for a Realm in realm to populate realmId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "rootUrl": {
              "description": "When specified, this value is prepended to all relative URLs.",
              "type": "string"
            },
            "signAssertions": {
              "description": "When true, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response. Defaults to false.",
              "type": "boolean"
            },
            "signDocuments": {
              "description": "When true, the SAML document will be signed by Keycloak using the realm's private key. Defaults to true.",
              "type": "boolean"
            },
            "signatureAlgorithm": {
              "description": "The signature algorithm used to sign documents. Should be one of \"RSA_SHA1\", \"RSA_SHA256\", \"RSA_SHA256_MGF1, \"RSA_SHA512\", \"RSA_SHA512_MGF1\" or \"DSA_SHA1\".",
              "type": "string"
            },
            "signatureKeyName": {
              "description": "The value of the KeyName element within the signed SAML document. Should be one of \"NONE\", \"KEY_ID\", or \"CERT_SUBJECT\". Defaults to \"KEY_ID\".",
              "type": "string"
            },
            "signingCertificate": {
              "description": "If documents or assertions from the client are signed, this certificate will be used to verify the signature.",
              "type": "string"
            },
            "signingPrivateKey": {
              "description": "If documents or assertions from the client are signed, this private key will be used to verify the signature.",
              "type": "string"
            },
            "validRedirectUris": {
              "description": "When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            }
          },
          "type": "object"
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object"
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object"
    },
    "status": {
      "description": "ClientStatus defines the observed state of Client.",
      "properties": {
        "atProvider": {
          "properties": {
            "assertionConsumerPostUrl": {
              "description": "SAML POST Binding URL for the client's assertion consumer service (login responses).",
              "type": "string"
            },
            "assertionConsumerRedirectUrl": {
              "description": "SAML Redirect Binding URL for the client's assertion consumer service (login responses).",
              "type": "string"
            },
            "authenticationFlowBindingOverrides": {
              "description": "Override realm authentication flow bindings",
              "items": {
                "properties": {
                  "browserId": {
                    "description": "Browser flow id, (flow needs to exist)",
                    "type": "string"
                  },
                  "directGrantId": {
                    "description": "Direct grant flow id (flow needs to exist)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "baseUrl": {
              "description": "When specified, this URL will be used whenever Keycloak needs to link to this client.",
              "type": "string"
            },
            "canonicalizationMethod": {
              "description": "The Canonicalization Method for XML signatures. Should be one of \"EXCLUSIVE\", \"EXCLUSIVE_WITH_COMMENTS\", \"INCLUSIVE\", or \"INCLUSIVE_WITH_COMMENTS\". Defaults to \"EXCLUSIVE\".",
              "type": "string"
            },
            "clientId": {
              "description": "The unique ID of this client, referenced in the URI during authentication and in issued tokens.",
              "type": "string"
            },
            "clientSignatureRequired": {
              "description": "When true, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via signing_certificate and signing_private_key. Defaults to true.",
              "type": "boolean"
            },
            "description": {
              "description": "The description of this client in the GUI.",
              "type": "string"
            },
            "enabled": {
              "description": "When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.",
              "type": "boolean"
            },
            "encryptAssertions": {
              "description": "When true, the SAML assertions will be encrypted by Keycloak using the client's public key. Defaults to false.",
              "type": "boolean"
            },
            "encryptionCertificate": {
              "description": "If assertions for the client are encrypted, this certificate will be used for encryption.",
              "type": "string"
            },
            "encryptionCertificateSha1": {
              "description": "(Computed) The sha1sum fingerprint of the encryption certificate. If the encryption certificate is not in correct base64 format, this will be left empty.",
              "type": "string"
            },
            "extraConfig": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of key/value pairs to add extra configuration attributes to this client. Use this attribute at your own risk, as s may conflict with top-level configuration attributes in future provider updates.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "forceNameIdFormat": {
              "description": "Ignore requested NameID subject format and use the one defined in name_id_format instead. Defaults to false.",
              "type": "boolean"
            },
            "forcePostBinding": {
              "description": "When true, Keycloak will always respond to an authentication request via the SAML POST Binding. Defaults to true.",
              "type": "boolean"
            },
            "frontChannelLogout": {
              "description": "When true, this client will require a browser redirect in order to perform a logout. Defaults to true.",
              "type": "boolean"
            },
            "fullScopeAllowed": {
              "description": "- Allow to include all roles mappings in the access token",
              "type": "boolean"
            },
            "id": {
              "type": "string"
            },
            "idpInitiatedSsoRelayState": {
              "description": "Relay state you want to send with SAML request when you want to do IDP Initiated SSO.",
              "type": "string"
            },
            "idpInitiatedSsoUrlName": {
              "description": "URL fragment name to reference client when you want to do IDP Initiated SSO.",
              "type": "string"
            },
            "includeAuthnStatement": {
              "description": "When true, an AuthnStatement will be included in the SAML response. Defaults to true.",
              "type": "boolean"
            },
            "loginTheme": {
              "description": "The login theme of this client.",
              "type": "string"
            },
            "logoutServicePostBindingUrl": {
              "description": "SAML POST Binding URL for the client's single logout service.",
              "type": "string"
            },
            "logoutServiceRedirectBindingUrl": {
              "description": "SAML Redirect Binding URL for the client's single logout service.",
              "type": "string"
            },
            "masterSamlProcessingUrl": {
              "description": "When specified, this URL will be used for all SAML requests.",
              "type": "string"
            },
            "name": {
              "description": "The display name of this client in the GUI.",
              "type": "string"
            },
            "nameIdFormat": {
              "description": "Sets the Name ID format for the subject.",
              "type": "string"
            },
            "realmId": {
              "description": "The realm this client is attached to.",
              "type": "string"
            },
            "rootUrl": {
              "description": "When specified, this value is prepended to all relative URLs.",
              "type": "string"
            },
            "signAssertions": {
              "description": "When true, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response. Defaults to false.",
              "type": "boolean"
            },
            "signDocuments": {
              "description": "When true, the SAML document will be signed by Keycloak using the realm's private key. Defaults to true.",
              "type": "boolean"
            },
            "signatureAlgorithm": {
              "description": "The signature algorithm used to sign documents. Should be one of \"RSA_SHA1\", \"RSA_SHA256\", \"RSA_SHA256_MGF1, \"RSA_SHA512\", \"RSA_SHA512_MGF1\" or \"DSA_SHA1\".",
              "type": "string"
            },
            "signatureKeyName": {
              "description": "The value of the KeyName element within the signed SAML document. Should be one of \"NONE\", \"KEY_ID\", or \"CERT_SUBJECT\". Defaults to \"KEY_ID\".",
              "type": "string"
            },
            "signingCertificate": {
              "description": "If documents or assertions from the client are signed, this certificate will be used to verify the signature.",
              "type": "string"
            },
            "signingCertificateSha1": {
              "description": "(Computed) The sha1sum fingerprint of the signing certificate. If the signing certificate is not in correct base64 format, this will be left empty.",
              "type": "string"
            },
            "signingPrivateKey": {
              "description": "If documents or assertions from the client are signed, this private key will be used to verify the signature.",
              "type": "string"
            },
            "signingPrivateKeySha1": {
              "description": "(Computed) The sha1sum fingerprint of the signing private key. If the signing private key is not in correct base64 format, this will be left empty.",
              "type": "string"
            },
            "validRedirectUris": {
              "description": "When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            }
          },
          "type": "object"
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "spec"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "kind": [
        "Client"
      ],
      "version": "v1alpha1",
      "group": "samlclient.keycloak.crossplane.io"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}
