version: '3'

run: when_changed

env:
  # renovate: datasource=github-releases depName=siderolabs/talos
  TALOS_VERSION: v1.7.4
  # renovate: datasource=github-releases depName=kubernetes/kubernetes
  KUBERNETES_VERSION: v1.30.1

vars:
  ENVIRONMENT: dev
  MANIFESTS: # temporary file to hold built manifests for a task
    sh: mktemp /tmp/tmp.{{.TASK}}-XXX.yaml

tasks:
  test:
    cmds:
    - task: devcluster:create
    - defer: { task: devcluster:destroy }
    - task: git-mirror:start
    - task: root:apply
    - chainsaw test

  devcluster:create:
    deps:
    - task: generate-cilium-cni-patch
      vars:
        CNI_PATCH: hack/patches/cilium-cni.yaml
    cmds:
    - hack/scripts/create-cluster.sh
    - kubectl -n kube-system get configmap/coredns -o yaml | sed "/forward/i\        forward dev.local 10.5.0.11" | kubectl replace -f -
    - task: system:cilium:apply
    status:
    - docker ps | grep dev-controlplane-1

  devcluster:destroy:
    deps: [git-mirror:stop]
    cmds:
    - defer: talosctl config context "" && talosctl config remove dev --noconfirm
    - defer: kubectl config unset current-context
    - defer: kubectl config delete-context admin@dev
    - defer: kubectl config delete-user admin@dev
    - defer: kubectl config delete-cluster dev
    - talosctl cluster destroy --name dev

  production:genconfig:
    deps:
    - task: generate-cilium-cni-patch
      vars:
        ENVIRONMENT: production
        CNI_PATCH: clusterconfig/patches/cilium-cni.yaml
    cmds:
    - talhelper genconfig

  production:apply-insecure:
    deps: [production:genconfig]
    cmds:
    - talhelper gencommand apply --extra-flags "--insecure" | sh

  production:bootstrap:
    deps: [production:genconfig]
    cmds:
    - talhelper gencommand bootstrap | sh
    - talosctl health -n 10.1.2.11 --talosconfig=./clusterconfig/talosconfig
    - talhelper gencommand kubeconfig | sh
    - task: system:cilium:apply
      vars:
        ENVIRONMENT: production
    - task: root:apply
      vars: { ENVIRONMENT: production }

  root:apply:
    deps:
    - task: system:argocd:apply-minimal
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/root/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kubectl apply --server-side -f {{.MANIFESTS}}
    sources:
    - '{{.ROOT_DIR}}/root/**/*sonnet'
    status:
    - kubectl get apps/root -n argocd

  system:argocd:apply:
    deps:
    - task: platform:kube-prometheus:apply-crds
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/system/argocd/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kubectl apply --server-side -f {{.MANIFESTS}}
    - kubectl rollout status --watch deployment.apps,daemonset.apps,statefulset.apps -n argocd
    sources:
    - '{{.ROOT_DIR}}/system/argocd/**/*.yaml'
    status:
    - kubectl get gateway/argocd -n argocd

  system:argocd:apply-minimal:
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/system/argocd/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -x group=gateway.networking.k8s.io -x group=monitoring.coreos.com < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kubectl rollout status --watch deployment.apps,daemonset.apps,statefulset.apps -n argocd
    status:
    - kubectl get crd/applications.argoproj.io

  system:cert-manager:apply:
    deps:
    - task: platform:kube-prometheus:apply-crds
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/system/cert-manager/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -k CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kfilt -K CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kubectl rollout status --watch deployment.apps -n cert-manager
    sources:
    - '{{.ROOT_DIR}}/system/cert-manager/**/*.yaml'
    status:
    - kubectl get ns/cert-manager
  
  system:cert-manager:apply-crds:
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/system/cert-manager/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -k CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    status:
    - kubectl get crd/certificates.cert-manager.io

  system:cilium:apply:
    deps:
    - task: system:cert-manager:apply-crds
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    - task: platform:kube-prometheus:apply-crds
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/system/cilium/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -k CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kfilt -K CustomResourceDefinition -x group=cilium.io < {{.MANIFESTS}} | kubectl apply --server-side --force-conflicts -f -
    - kubectl rollout restart deployment.apps/cilium-operator daemonset.apps/cilium -n kube-system
    - kubectl rollout status --watch deployment.apps/cilium-operator daemonset.apps/cilium -n kube-system
    - kfilt -i group=cilium.io < {{.MANIFESTS}} | kubectl apply --server-side -f -
    sources:
    - '{{.ROOT_DIR}}/system/cilium/**/*.yaml'
    status:
    - kubectl get gatewayclass/cilium
  
  system:k8s-gateway:apply:
    deps:
    - task: system:cert-manager:apply
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    - task: platform:kube-prometheus:apply-crds
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/system/k8s-gateway/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kubectl apply --server-side -f {{.MANIFESTS}}
    sources:
    - '{{.ROOT_DIR}}/system/k8s-gateway/**/*.yaml'
    status:
    - kubectl get deploy/k8s-gateway -n kube-system

  system:kyverno:apply:
    deps:
    - task: platform:kube-prometheus:apply-crds
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/system/kyverno/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kubectl apply --server-side -f {{.MANIFESTS}}
    sources:
    - '{{.ROOT_DIR}}/system/kyverno/**/*.yaml'
    status:
    - kubectl get ns/kyverno

  system:piraeus:apply:
    deps:
    - task: system:cert-manager:apply
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/system/piraeus/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -k CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kfilt -K CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kubectl wait --for=condition=Available linstorcluster --all -n piraeus-datastore --timeout=10m
    sources:
    - '{{.ROOT_DIR}}/system/piraeus/**/*.yaml'
    status:
    - kubectl get ns/piraeus-datastore

  platform:cloudflare-operator:apply:
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/platform/cloudflare-operator/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -k CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kfilt -K CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    sources:
    - '{{.ROOT_DIR}}/platform/cloudflare-operator/**/*.yaml'
    status:
    - kubectl get ns/cloudflare-operator-system

  platform:cnpg:apply:
    deps:
    - task: system:piraeus:apply
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/platform/cnpg/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -k CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kfilt -K CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kubectl rollout status --watch deployment.apps -n cnpg-system
    sources:
    - '{{.ROOT_DIR}}/platform/cnpg/**/*.yaml'
    status:
    - kubectl get ns/cnpg-system

  platform:crossplane:apply:
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/platform/crossplane/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -x group=pkg.crossplane.io < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kubectl rollout status --watch deployment.apps -n crossplane-system
    - kfilt -i group=pkg.crossplane.io < {{.MANIFESTS}} | kubectl apply --server-side -f -
    sources:
    - '{{.ROOT_DIR}}/platform/crossplane/**/*.yaml'
    status:
    - kubectl get ns/crossplane-system

  platform:external-secrets:apply:
    deps:
    - task: platform:kube-prometheus:apply-crds
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/platform/external-secrets/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -k CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kfilt -K CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    sources:
    - '{{.ROOT_DIR}}/platform/external-secrets/**/*.yaml'
    status:
    - kubectl get ns/external-secrets

  platform:keycloak:apply:
    deps:
    - task: platform:cnpg:apply
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    - task: platform:crossplane:apply
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    - task: platform:external-secrets:apply
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    - task: system:piraeus:apply
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    - task: system:k8s-gateway:apply
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/platform/keycloak/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -k CustomResourceDefinition -k Provider < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kubectl wait --for=condition=Installed --for=condition=Healthy provider.pkg.crossplane.io/provider-keycloak --timeout=10m
    - kfilt -K CustomResourceDefinition -K Provider < {{.MANIFESTS}} | kubectl apply --server-side -f -
    sources:
    - '{{.ROOT_DIR}}/platform/keycloak/**/*.yaml'
    status:
    - kubectl get ns/keycloak

  platform:kube-prometheus:apply:
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/platform/kube-prometheus/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -k CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kfilt -K CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    sources:
    - '{{.ROOT_DIR}}/platform/kube-prometheus/**/*sonnet'
    status:
    - kubectl get deploy/prometheus-operator -n monitoring
  
  platform:kube-prometheus:apply-crds:
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/platform/kube-prometheus/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -k CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    status:
    - kubectl get crd/servicemonitors.monitoring.coreos.com

  platform:kubevirt:apply:
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/platform/kubevirt/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -k CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kfilt -K CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    sources:
    - '{{.ROOT_DIR}}/platform/kubevirt/**/*.yaml'
    status:
    - kubectl get ns/kubevirt

  platform:mariadb-operator:apply:
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/platform/mariadb-operator/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kfilt -k CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kfilt -K CustomResourceDefinition < {{.MANIFESTS}} | kubectl apply --server-side -f -
    - kubectl rollout status --watch deployment.app -n mariadb-system
    sources:
    - '{{.ROOT_DIR}}/platform/mariadb-operator/**/*.yaml'
    status:
    - kubectl get ns/mariadb-system

  apps:ezxss:apply:
    deps:
    - task: platform:mariadb-operator:apply
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    - task: system:piraeus:apply
      vars: { ENVIRONMENT: '{{.ENVIRONMENT}}' }
    preconditions:
    - kubectl config current-context | grep @{{.ENVIRONMENT}}
    cmds:
    - hack/scripts/build.sh {{.ROOT_DIR}}/apps/ezxss/{{.ENVIRONMENT}} > {{.MANIFESTS}}
    - kubectl apply --server-side -f {{.MANIFESTS}}
    sources:
    - '{{.ROOT_DIR}}/apps/ezxss/**/*.yaml'
    status:
    - kubectl get ns/ezxss

  git-mirror:start:
    vars:
      NAME: git-mirror
      VOLUME: '{{.ROOT_DIR}}/.git:/git/repo.git:ro'
      IP: 10.5.0.254
      IMAGE:
        sh: docker buildx build -q hack/git-mirror
    cmds:
    - docker run --name {{.NAME}} -v {{.VOLUME}} --net dev --ip {{.IP}} -d --rm {{.IMAGE}}
    status:
    - docker ps | grep git-mirror

  git-mirror:stop:
    vars:
      NAME: git-mirror
    cmds:
    - docker stop {{.NAME}}
    status:
    - '! docker ps | grep git-mirror'

  generate-cilium-cni-patch:
    internal: true
    env:
      MANIFESTS:
        sh: hack/scripts/cilium-cni-manifests.sh {{.ENVIRONMENT}}
    cmds:
    - hack/scripts/cilium-cni-patch.sh {{.CNI_PATCH}}
